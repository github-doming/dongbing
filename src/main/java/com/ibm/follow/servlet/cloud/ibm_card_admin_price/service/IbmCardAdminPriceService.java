package com.ibm.follow.servlet.cloud.ibm_card_admin_price.service;import com.ibm.common.core.BaseServicePlus;import com.ibm.common.enums.IbmStateEnum;import com.ibm.common.enums.IbmTypeEnum;import com.ibm.follow.servlet.cloud.ibm_card_admin_price.entity.IbmCardAdminPrice;import org.doming.core.tools.NumberTool;import org.doming.core.tools.StringTool;import java.sql.SQLException;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;/** * IBM_管理员卡种价格 服务类 * * @author Robot */public class IbmCardAdminPriceService extends BaseServicePlus {    /**     * 保存IBM_管理员卡种价格 对象数据     *     * @param entity IbmCardAdminPrice对象数据     */    public String save(IbmCardAdminPrice entity) throws Exception {        return dao.save(entity);    }    /**     * 逻辑删除     *     * @param id 要删除ibm_card_admin_price 的 IBM_CARD_ADMIN_PRICE_ID_主键id     */    public void del(String id) throws Exception {        String sql = "update ibm_card_admin_price set state_='DEL' where IBM_CARD_ADMIN_PRICE_ID_=?";        List<Object> parameters = new ArrayList<>();        parameters.add(id);        dao.execute(sql, parameters);    }    /**     * 逻辑删除IBM_CARD_ADMIN_PRICE_ID_主键id数组的数据     *     * @param idArray 要删除 ibm_card_admin_price 的 IBM_CARD_ADMIN_PRICE_ID_数组     */    public void delAll(String[] idArray) throws Exception {        if (idArray != null) {            StringBuilder stringBuilder = new StringBuilder();            for (String id : idArray) {                stringBuilder.append("'").append(id).append("'").append(",");            }            stringBuilder.deleteCharAt(stringBuilder.length() - 1);            String sql = "update ibm_card_admin_price set state_='DEL' where IBM_CARD_ADMIN_PRICE_ID_ in(" + stringBuilder.toString() + ")";            dao.execute(sql, null);        }    }    /**     * 物理删除     *     * @param id 要删除 ibm_card_admin_price  的 IBM_CARD_ADMIN_PRICE_ID_     */    public void delPhysical(String id) throws Exception {        String sql = "delete from ibm_card_admin_price where IBM_CARD_ADMIN_PRICE_ID_=?";        List<Object> parameters = new ArrayList<>();        parameters.add(id);        dao.execute(sql, parameters);    }    /**     * 物理删除IBM_CARD_ADMIN_PRICE_ID_主键id数组的数据     *     * @param idArray 要删除ibm_card_admin_price 的 IBM_CARD_ADMIN_PRICE_ID_数组     */    public void delAllPhysical(String[] idArray) throws Exception {        if (idArray != null) {            StringBuilder stringBuilder = new StringBuilder();            for (String id : idArray) {                stringBuilder.append("'").append(id).append("'").append(",");            }            stringBuilder.deleteCharAt(stringBuilder.length() - 1);            String sql = "delete from ibm_card_admin_price where IBM_CARD_ADMIN_PRICE_ID_ in(" + stringBuilder.toString() + ")";            dao.execute(sql, null);        }    }    /**     * 更新IbmCardAdminPrice实体信息     *     * @param entity IBM_管理员卡种价格 实体     */    public void update(IbmCardAdminPrice entity) throws Exception {        dao.update(entity);    }    /**     * 根据ibm_card_admin_price表主键查找 IBM_管理员卡种价格 实体     *     * @param id ibm_card_admin_price 主键     * @return IBM_管理员卡种价格 实体     */    public IbmCardAdminPrice find(String id) throws Exception {        return (IbmCardAdminPrice) this.dao.find(IbmCardAdminPrice.class, id);    }    /**     * 查找用户价值实体     *     * @param cardTreeId 分类ID     * @return IBM_管理员卡种价格 实体     */    public IbmCardAdminPrice findEntity(String cardTreeId, String userId) throws Exception {        String sql = "SELECT * FROM `ibm_card_admin_price` where CARD_TREE_ID_ = ? AND USER_ID_=? AND STATE_ = ?";        List<Object> parameters = new ArrayList<>(3);        parameters.add(cardTreeId);        parameters.add(userId);        parameters.add(IbmStateEnum.OPEN.name());        return dao.findObject(IbmCardAdminPrice.class, sql, parameters);    }    /**     * 根据代理类型删除卡类价值     * @param cardTreeId 分类Id     */    public void delByCardTreeType(String cardTreeId,String userType) throws SQLException {        StringBuilder sql = new StringBuilder("update ibm_card_admin_price icap " +                "LEFT JOIN ibm_card_admin ica ON icap.USER_ID_ = ica.APP_USER_ID_ OR icap.SUB_USER_ID_ = ica.APP_USER_ID_ " +                "set icap.state_=? where icap.CARD_TREE_ID_=? and ica.USER_TYPE_ = ? ");        List<Object> parameters = new ArrayList<>(3);        parameters.add(IbmStateEnum.DEL.name());        parameters.add(cardTreeId);        parameters.add(userType);        dao.execute(sql.toString(), parameters);    }    /**     * 根据分类ID删除     *     * @param cardTreeId  分类Id     */    public void delByTreeId(String cardTreeId) throws SQLException {        String sql = "update ibm_card_admin_price set STATE_=? where CARD_TREE_ID_=? ";        List<Object> parameters = new ArrayList<>(2);        parameters.add(IbmStateEnum.DEL.name());        parameters.add(cardTreeId);        dao.execute(sql, parameters);    }    /**     * 获取用户拥有的卡种信息     *     * @param userId 代理ID     * @return 卡类分类ID, 卡类名     */    public List<String> listUserCardTreeIds(String userId) throws SQLException {        String sql = "SELECT CARD_TREE_ID_ FROM `ibm_card_admin_price` where USER_ID_ = ? AND STATE_ !=? GROUP BY CARD_TREE_ID_";        List<Object> parameters = new ArrayList<>(2);        parameters.add(userId);        parameters.add(IbmStateEnum.DEL.name());        return dao.findStringList("CARD_TREE_ID_", sql, parameters);    }    /**     * 更新自己的卡种价格信息     *     * @param userId        用户Id     * @param cardTreePrice 卡种分类价格     * @param cardState     卡种状态     */    public void updateCardTree(String userId, double cardTreePrice, String cardTreeType, String cardState, Date date) throws SQLException {        String sql = "UPDATE `ibm_card_admin_price` icap LEFT JOIN ibm_card_admin ica on icap.USER_ID_ = ica.APP_USER_ID_" +                " SET icap.`CARD_PRICE_T_`=?, icap.`UPDATE_TIME_`= ?, icap.`UPDATE_TIME_LONG_`=?, icap.`STATE_`=? " +                " WHERE icap.STATE_!=? AND icap.USER_ID_ = ? AND ica.USER_TYPE_=? ";        List<Object> parameters = new ArrayList<>(6);        parameters.add(cardTreePrice);        parameters.add(date);        parameters.add(System.currentTimeMillis());        parameters.add(cardState);        parameters.add(IbmStateEnum.DEL.name());        parameters.add(userId);        parameters.add(cardTreeType);        dao.execute(sql, parameters);    }    /**     * 获取用户默认价格表     *     * @return 用户默认价格表     */    public List<Map<String, Object>> listUserDef(String userId) throws SQLException {        return listInfo("", userId);    }    /**     * 获取用户价格     *     * @param userId     父用户主键     * @param subAgentId 子用户主键     * @return 用户价格     */    public List<Map<String, Object>> listInfo(String userId, String subAgentId) throws SQLException {        String sql = "SELECT ip.CARD_TREE_NAME_,ip.CARD_PRICE_T_,ip.CARD_TREE_ID_,it.SN_,ip.CARD_TREE_ID_ FROM ibm_card_admin_price ip " +                " LEFT JOIN ibm_card_tree it ON ip.CARD_TREE_ID_ = it.IBM_CARD_TREE_ID_ WHERE ";        List<Object> parameters = new ArrayList<>();        if (StringTool.notEmpty(userId)) {            sql += "USER_ID_ = ? and ";            parameters.add(userId);        }        sql += "SUB_USER_ID_ = ? AND ip.STATE_ != ? AND it.STATE_ != ? ORDER BY it.SN_ ";        parameters.add(subAgentId);        parameters.add(IbmStateEnum.DEL.name());        parameters.add(IbmStateEnum.DEL.name());        return dao.findMapList(sql, parameters);    }    /**     * 获取上级个自己定的价格     *     * @param subAgentId 子用户主键     * @return 用户价格     */    public long listParentInfo(String cardTreeId,String subAgentId) throws SQLException {        String sql = "SELECT ip.CARD_PRICE_T_ FROM ibm_card_admin_price ip " +                " LEFT JOIN ibm_card_tree it ON ip.CARD_TREE_ID_ = it.IBM_CARD_TREE_ID_ " +                " WHERE CARD_TREE_ID_ = ? AND SUB_USER_ID_ =?  AND ip.STATE_ != ? AND it.STATE_ != ? ORDER BY it.SN_ ";        List<Object> parameters = new ArrayList<>();        parameters.add(cardTreeId);        parameters.add(subAgentId);        parameters.add(IbmStateEnum.DEL.name());        parameters.add(IbmStateEnum.DEL.name());        String cardPrice = dao.findString("CARD_PRICE_T_",sql, parameters);        return NumberTool.getLong(cardPrice,0L);    }    /**     * 获取新增代理用户的 卡种信息列表     *     * @return 卡种信息列表     */    public List<Map<String, Object>> listAddAgentInfo(String userId) throws SQLException {        String sql = "SELECT icr.IBM_CARD_TREE_ID_,icr.CARD_TREE_NAME_,icr.CARD_TREE_POINT_,icap.CARD_PRICE_T_ " +                " FROM `ibm_card_admin_price` icap LEFT JOIN ibm_card_tree icr ON icap.CARD_TREE_ID_ = icr.IBM_CARD_TREE_ID_ " +                " WHERE icap.USER_ID_ = ? and icap.SUB_USER_ID_ = ? AND icr.CARD_TREE_TYPE_ = ? AND icap.STATE_ != ?";        List<Object> parameters = new ArrayList<>(3);        parameters.add(userId);        parameters.add(IbmStateEnum.DEF.name());        parameters.add(IbmTypeEnum.AGENT.name());        parameters.add(IbmStateEnum.DEL.name());        return dao.findMapList(sql, parameters);    }    /**     * 更新充值卡价格     */    public void updateCardPrice(String userId,String subUserId, String cardTreeId, long cardTreePriceT, Date nowTime) throws SQLException {        String sql = "UPDATE ibm_card_admin_price set CARD_PRICE_T_ = ?,UPDATE_TIME_ = ?,UPDATE_TIME_LONG_ = ? " +                " where CARD_TREE_ID_ = ? AND USER_ID_ = ? AND STATE_ != ? ";        List<Object> parameters = new ArrayList<>(7);        parameters.add(cardTreePriceT);        parameters.add(nowTime);        parameters.add(System.currentTimeMillis());        parameters.add(cardTreeId);        parameters.add(userId);        parameters.add(IbmStateEnum.DEL.name());        if(StringTool.notEmpty(subUserId)){            sql+= " AND SUB_USER_ID_ = ? ";            parameters.add(subUserId);        }        super.execute(sql, parameters);    }    /**     * 根据分类更新价格信息     * @param cardTreeId 分类Id     * @param cardTreePriceT 价格     * @param cardTreeName 分类名字     * @param cardState 状态     * @param nowTime 时间     */    public void updateAdminPriceInfo(String cardTreeId, long cardTreePriceT, String cardTreeName,String cardState, Date nowTime) throws SQLException {        String sql = "UPDATE ibm_card_admin_price set UPDATE_TIME_ = ?,UPDATE_TIME_LONG_ = ? " ;        List<Object> parameters = new ArrayList<>(7);        parameters.add(nowTime);        parameters.add(System.currentTimeMillis());        if(StringTool.notEmpty(cardTreePriceT)){            sql+= ",CARD_PRICE_T_ = ? ";            parameters.add(cardTreePriceT);        }        if(StringTool.notEmpty(cardTreeName)){            sql+= ",CARD_TREE_NAME_ = ? ";            parameters.add(cardTreeName);        }        if(StringTool.notEmpty(cardState)){            sql+= ",STATE_ = ? ";            parameters.add(cardState);        }        sql+= " where CARD_TREE_ID_ = ? AND STATE_ != ?";        parameters.add(cardTreeId);        parameters.add(IbmStateEnum.DEL.name());        dao.execute(sql,parameters);    }    public void delByUserId(String userId) throws SQLException {        String sql = "UPDATE ibm_card_admin_price set STATE_ = ?,UPDATE_TIME_ = ?,UPDATE_TIME_LONG_ = ? "                + " WHERE USER_ID_ = ? and STATE_ != ?";        List<Object> parameterList = new ArrayList<>(4);        parameterList.add(IbmStateEnum.DEL.name());        parameterList.add(new Date());        parameterList.add(System.currentTimeMillis());        parameterList.add(userId);        parameterList.add(IbmStateEnum.DEL.name());        super.execute(sql,parameterList);    }    /**     * 查找用户的价格信息     * @param userId 用户Id     * @return 价格信息     */    public List<Map<String, Object>> listCardTreeByUser(String userId) throws SQLException {        String sql = "SELECT it.CARD_TREE_NAME_,ip.CARD_PRICE_T_,it.CARD_TREE_POINT_,it.CARD_TREE_TYPE_,it.CREATER_NAME_,it.CREATE_TIME_LONG_,it.STATE_,it.DESC_,it.SN_ " +                "FROM `ibm_card_admin_price` ip LEFT JOIN ibm_card_tree it on ip.CARD_TREE_ID_ = it.IBM_CARD_TREE_ID_ " +                "WHERE ip.USER_ID_ = ? AND ip.SUB_USER_ID_ = ? ";        List<Object> parameterList = new ArrayList<>(2);        parameterList.add(userId);        parameterList.add(IbmStateEnum.DEF.name());        return dao.findMapList(sql,parameterList);    }}