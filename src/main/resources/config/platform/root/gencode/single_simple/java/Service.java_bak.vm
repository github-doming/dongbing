package ${ay_package_name}service;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;

import ${ay_package_name}entity.${ay_table_class};
import c.x.platform.root.common.service.BaseService;
import c.a.util.core.jdbc.bean.nut.PageCoreBean;
import c.a.util.core.string.StringUtil;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
* ${ay_table_comment} 的服务类
 * @author Robot
 */
public class ${ay_table_class}Service extends BaseService {

	protected Logger log = LogManager.getLogger(this.getClass());

	/**
	 * 保存${ay_table_comment}对象数据
	 * @param entity ${ay_table_class}对象数据
	 */
	public String save(${ay_table_class} entity) throws Exception {
		return dao.save(entity);
	}

	/**
	 * 逻辑删除
	 * @param id 要删除${ay_table_name} 的 ${columnNamePk}主键id
	 */
	public void del(String id) throws Exception {
		String sql = "update ${ay_table_name} set state_='DEL' where ${columnNamePk}=?";
		List<Object> parameters = new ArrayList<>();
		parameters.add(id);
		dao.execute(sql, parameters);
	}

	/**
	 * 逻辑删除${columnNamePk}主键id数组的数据
	 * @param idArray 要删除 ${ay_table_name} 的 ${columnNamePk}数组
	 */
	public void delAll(String[] idArray) throws Exception {
		if (idArray != null) {
			StringBuilder stringBuilder = new StringBuilder();
			for (String id : idArray) {
				stringBuilder.append("'").append(id).append("'").append(",");
			}
			stringBuilder.deleteCharAt(stringBuilder.length() - 1);
			String sql = "update ${ay_table_name} set state_='DEL' where ${columnNamePk} in(" + stringBuilder.toString() + ")";
			dao.execute(sql, null);
		}
	}

	/**
	 * 物理删除
	 * @param id 要删除 ${ay_table_name}  的 ${columnNamePk}
	 */
	public void delPhysical(String id) throws Exception {
		String sql = "delete from ${ay_table_name} where ${columnNamePk}=?";
		List<Object> parameters = new ArrayList<>();
		parameters.add(id);
		dao.execute(sql, parameters);
	}

	/**
	 * 物理删除${columnNamePk}主键id数组的数据
	 * @param idArray 要删除${ay_table_comment}的 ${columnNamePk}数组
	 */
	public void delAllPhysical(String[] idArray) throws Exception {
		if (idArray != null) {
			StringBuilder stringBuilder = new StringBuilder();
			for (String id : idArray) {
				stringBuilder.append("'").append(id).append("'").append(",");
			}
			stringBuilder.deleteCharAt(stringBuilder.length() - 1);
			String sql = "delete from ${ay_table_name} where ${columnNamePk} in(" + stringBuilder.toString() + ")";
			dao.execute(sql, null);
		}
	}

	/**
	 * 更新${ay_table_class}实体信息
	 * @param entity ${ay_table_comment}实体
	 */
	public void update(${ay_table_class} entity) throws Exception {
		dao.update(entity);
	}

	/**
	 * 根据${ay_table_name}表主键查找${ay_table_class}实体
	 * @param id ${ay_table_name} 主键
	 * @return ${ay_table_comment}实体
	 */
	public ${ay_table_class} find(String id) throws Exception {
		return (${ay_table_class}) this.dao.find(${ay_table_class}. class,id);

	}

	/**
	 * 获取分页Map数据
	 * @param sortFieldName 排序字段名
	 * @param sortOrderName 排序顺序
	 * @param pageIndex 页面索引
	 * @param pageSize 页面大小
	 * @return 分页Map数据
	 */
	public PageCoreBean find(String sortFieldName, String sortOrderName, Integer pageIndex,
			Integer pageSize) throws Exception {
		String sqlCount = "SELECT count(*) FROM ${ay_table_name} where state_!='DEL'";
		String sql;
		if (StringUtil.isBlank(sortFieldName) || StringUtil.isBlank(sortOrderName)) {
			sql = "SELECT * FROM ${ay_table_name}  where state_!='DEL' order by UPDATE_TIME_ desc";
		} else {
			sql = "SELECT * FROM ${ay_table_name}  where state_!='DEL' order by " + sortFieldName + " " + sortOrderName;
		}
		return dao.page(sql, null, pageIndex, pageSize, sqlCount);
	}

	/**
	 * 分页获取 ${ay_table_comment}数据
	 * @param sortFieldName 排序字段名
	 * @param sortOrderName 排序顺序
	 * @param pageIndex 页面索引
	 * @param pageSize 页面大小
	 * @return 分页${ay_table_class}数据
	 */
	public PageCoreBean findObject(String sortFieldName, String sortOrderName, Integer pageIndex,
			Integer pageSize) throws Exception {
		String sqlCount = "SELECT count(*) FROM ${ay_table_name} where state_!='DEL'";
		String sql;
		if (StringUtil.isBlank(sortFieldName) || StringUtil.isBlank(sortOrderName)) {
			sql = "SELECT * FROM ${ay_table_name}  where state_!='DEL' order by UPDATE_TIME_ desc";
		} else {
			sql = "SELECT * FROM ${ay_table_name}  where state_!='DEL' order by " + sortFieldName + " " + sortOrderName;
		}
		return dao.page(${ay_table_class}. class,sql, null, pageIndex, pageSize, sqlCount);
	}

	/**
	 * 按照更新顺序查询所有可用Map信息
	 * @return 可用Map信息
	 */
	public List<Map<String, Object>> findAll() throws Exception {
		String sql = "SELECT * FROM ${ay_table_name}  where state_!='DEL' order by UPDATE_TIME_ desc";
		return this.dao.findMapList(sql, null);
	}

	/**
	 * 按照更新顺序查询所有可用 ${ay_table_comment}数据信息
	 * @return 可用<${ay_table_class}>数据信息
	 */
	public List findObjectAll() throws Exception {
		String sql = "SELECT * FROM ${ay_table_name}  where state_!='DEL' order by UPDATE_TIME_ desc";
		return this.dao.findObjectList(${ay_table_class}. class,sql);
	}
}
