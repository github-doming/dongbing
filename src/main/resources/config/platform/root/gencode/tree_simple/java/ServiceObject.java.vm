package ${ay_package_name}.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import c.a.util.core.string.StringUtil;

import ${ay_package_name}.entity.${ay_table_class};
import  c.x.platform.root.common.service.BaseService;

public class ${ay_table_class}ServiceObject extends BaseService {
	protected Logger log = LogManager.getLogger(this.getClass());
	public ${ay_table_class} find(String id) throws Exception {
		return (${ay_table_class}) this.dao.find(${ay_table_class}.class, id);
	}

	public void update(${ay_table_class} entity) throws Exception {
		dao.update(entity);
		// 更新所有节点的path
		${ay_table_class} parent = this.find(entity.getParent().toString());
		log.debug("父母id=" + parent.get${methodNamePk}());
			this.updatePath(" ${ay_table_name}", "${columnNamePk}", parent
					.get${methodNamePk}().toString());
	}

	public void del(String id) throws Exception {
		// 打出本身的path
		StringBuilder sb = new StringBuilder();
		sb.append("  select path FROM  ${ay_table_name} where ${columnNamePk}= ");
		sb.append(id);
		String sql_query = sb.toString();
		${ay_table_class} parent = (${ay_table_class}) dao.findObject(
				${ay_table_class}.class, sql_query, null);
		String parent_path = parent.getPath();
		// 清空 StringBuilder
		sb.setLength(0);
		// 删除所有孩子
		sb.append(" delete  from ${ay_table_name} where path like ?");
		String sql_del = sb.toString();
		List<Object> parameters = new ArrayList<Object>();
		// delete from ${ay_table_name} where path like '%1.'
		parameters.add("" + parent_path + "%");
		dao.execute(sql_del, parameters);
	}

	public void save(${ay_table_class} entity) throws Exception {
		String parentId = entity.getParent();
		// entity.setIsShow(1);
		// entity.setPermissionGrade(0);
		if (StringUtil.isBlank(parentId)) {
			parentId = "1";
			entity.setParent(parentId);

		}
		${ay_table_class} parent = this.find(parentId);
		// 设置主键
		String pk = this.findPK(entity);
		if (StringUtil.isNotBlank(pk)) {
			entity.set${methodNamePk}(pk);
			// 构造path
			String path = parent.getPath() + entity.get${methodNamePk}() + ".";
			entity.setPath(path);
			// 保存
			dao.savePkNot(entity);
		}

	}
	
	/**
	 * 
	 * 查询所有
	 * @return
	 * @throws Exception
	 */
	public List<${ay_table_class}> findAll() throws Exception {
	    //String sql = "SELECT * FROM ${ay_table_name} order by ${columnNamePk} desc";
		String sql = "SELECT * FROM ${ay_table_name} order by UPDATE_TIME_ desc";
		List<${ay_table_class}> list = this.dao.findObjectList(${ay_table_class}.class, sql);

		return list;
	}
}
